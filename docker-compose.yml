# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    container_name: SnapBuy-App
    image: snapbuy-app:latest
    ports:
      - 8080:8080
    networks:
      - s-network
    depends_on:
      mysql:
        condition: service_healthy

  # The commented out section below is an example of how to define a SQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.

  mysql:
    image: mysql:latest
    container_name: SnapBuy-MySQL
    environment:
      MYSQL_ROOT_PASSWORD: "RishabhGupta&2005@"
      MYSQL_DATABASE: SnapBuy
      MYSQL_USER: SnapBuy-MySQL
      MYSQL_PASSWORD: "RishabhGupta&2005@"

    ports:
      - "3307:3306"
    networks:
      - s-network
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-pRishabhGupta&2005@" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  s-network:
    driver: bridge